#!/usr/bin/env python3

# TODO This needs to be updated for Queens this will otherwise return a silent
# warnings.warn('Using keystoneclient sessions has been deprecated. '

# Keystone monitoring script for Nagios using Keystone V3 API
#
# Copyright 2015 CSC - IT Center For Science
#
# Author: Uwe Grawert <uwe.grawert@csc.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import argparse
from keystoneauth1 import session
from keystoneauth1.identity import v3
from keystoneclient.v3 import client as keystone

NAGIOS_STATE_OK       = 0
NAGIOS_STATE_WARNING  = 1
NAGIOS_STATE_CRITICAL = 2
NAGIOS_STATE_UNKNOWN  = 3

NAGIOS_STATE = [ 'OK', 'WARNING', 'CRITICAL', 'UNKNOWN' ]

class CheckException(Exception):
  ''' Exception with Nagios exit status '''
  def __init__(self, message, status=NAGIOS_STATE_CRITICAL):
    self.message = message
    self.status  = status
  def __str__(self):
    return self.message

class CheckKeystone(keystone.Client):
  '''
  Check Keystone functionality
  '''
  def __init__(self, credentials):
    self.keystone_session = session.Session(auth=v3.Password(**{k: v for k, v in credentials.items() if k not in ["csc_stats_domain", "milliseconds"]}))
    super(CheckKeystone, self).__init__(session=self.keystone_session)

  def check_service_endpoints(self):
    for service in self.services.list(enabled=True):
      if not len(self.endpoints.list(service=service,interface='public')):
        raise CheckException(
                "Service %s has no 'public' endpoint defined" % service.name,
                NAGIOS_STATE_WARNING)
      if not len(self.endpoints.list(service=service, interface='admin')):
        raise CheckException(
                "Service %s has no 'admin' endpoint defined" % service.name,
                NAGIOS_STATE_CRITICAL)
      if not len(self.endpoints.list(service=service, interface='internal')):
        raise CheckException(
                "Service %s has no 'internal' endpoint defined" % service.name,
                NAGIOS_STATE_CRITICAL)

  def csc_stats(self, domain_name):
    try:
      domain_id = self.domains.list(name=domain_name).pop().id
    except Exception:
      raise CheckException("Can not query CSC stats. Domain not found: %s" % domain_name)

    # Make a list of projects
    projects = self.projects.list()
    projects_enabled = self.projects.list(enabled=True)
    projects_disabled = self.projects.list(enabled=False)

    users    = self.users.list(domain=domain_id)
    # remove training and system users from user list
    users    = filter(lambda user: 'trng' not in user.name, users)
    users    = filter(lambda user: hasattr(user, 'email'), users)
    users    = filter(lambda user: '@localhost' not in user.email, users)

    # list of unique email addresses
    uniq_users = list(set([user.email for user in users]))
    # filter CSC users
    csc_users  = list(filter(lambda user: '@csc.fi' in user, uniq_users))
    # Get amount of projects per role
    roles_string = self.projects_per_role()

    return "'projects'=%s \
'projectsenabled'=%s \
'projectsdisabled'=%s \
'totalusers'=%s \
'cscusers'=%s \
'noncscusers'=%s %s" % \
            (len(projects),
            len(projects_enabled),
            len(projects_disabled),
            len(uniq_users),
            len(csc_users),
            len(uniq_users) - len(csc_users),
            roles_string)

  def projects_per_role(self):
    role_assignments_list = self.role_assignments.list()
    role_assignments_list_enabled = []
    roles_per_id = {}

    projects_enabled = self.projects.list(enabled=True)
    projects_enabled_id = []
    for project in projects_enabled:
      projects_enabled_id.append(project.id)

    # Calculate how many projects per roles
    for role_assignments in role_assignments_list:
      if 'project' in role_assignments.scope.keys():
        for value in role_assignments.scope.values():
          assignment_project_id = value['id']
        if assignment_project_id in projects_enabled_id:
          if role_assignments.role['id'] in roles_per_id:
            roles_per_id[role_assignments.role['id']] +=1
          else:
            roles_per_id[role_assignments.role['id']] = 1

    role_names = self.roles.list()
    return_string=''
    # Map role ids to role names
    for role in role_names:
      if role.id in roles_per_id:
        # Genertate string for def csc_stats
        return_string += " 'role_" + str(role.name) + "'=" + str(roles_per_id[role.id])
    return(return_string)

def exit_output(exit_code=NAGIOS_STATE_OK, output=''):
  '''
  Exits with the specified exit_code and output in the format nagios/opsview expects.
  '''
  print('Keystone: ' + NAGIOS_STATE[exit_code] + ' | ' + output)
  sys.exit(exit_code)

def main():
  parser = argparse.ArgumentParser(description='Check an OpenStack Keystone server')
  parser.add_argument('-u', '--username',
                      metavar='<auth-user-name>',
                      default=os.environ.get('OS_USERNAME'),
                      help='Name used for authentication with the '
                           'OpenStack Identity service. '
                           'Defaults to env[OS_USERNAME].')
  parser.add_argument('-p', '--password',
                      metavar='<auth-password>',
                      default=os.environ.get('OS_PASSWORD'),
                      help='Password used for authentication with the '
                           'OpenStack Identity service. '
                           'Defaults to env[OS_PASSWORD].')
  parser.add_argument('-t', '--project_name',
                      metavar='<auth-project-name>',
                      default=os.environ.get('OS_TENANT_NAME'),
                      help='Project to request authorization on. '
                           'Defaults to env[OS_TENANT_NAME].')
  parser.add_argument('--project_id',
                      metavar='<tenant-id>',
                      default=os.environ.get('OS_TENANT_ID'),
                      help='Project id to request authorization on. '
                           'Defaults to env[OS_TENANT_ID].')
  parser.add_argument('--project_domain_name',
                      metavar='<auth-project-domain-name>',
                      default=os.environ.get('OS_PROJECT_DOMAIN_NAME'),
                      help='Name of the domain of the project. '
                           'Defaults to env[OS_PROJECT_DOMAIN_NAME].')
  parser.add_argument('--user_domain_name',
                      metavar='<auth-user-domain-name>',
                      default=os.environ.get('OS_USER_DOMAIN_NAME'),
                      help='Name of the domain of the user. '
                           'Defaults to env[OS_USER_DOMAIN_NAME].')
  parser.add_argument('--domain_name',
                      metavar='<auth-domain-name>',
                      default=os.environ.get('OS_DOMAIN_NAME'),
                      help='Domain to request authorization on. '
                           'Defaults to env[OS_DOMAIN_NAME].')
  parser.add_argument('-e', '--domain_id',
                      metavar='<auth-domain-id>',
                      default=os.environ.get('OS_DOMAIN_ID'),
                      help='Domain id to request authorization on. '
                           'Defaults to env[OS_DOMAIN_ID].')
  parser.add_argument('-a', '--auth_url',
                      metavar='<auth-url>',
                      default=os.environ.get('OS_AUTH_URL'),
                      help='Specify the Identity endpoint to use for '
                           'authentication. '
                           'Defaults to env[OS_AUTH_URL].')
  parser.add_argument('--csc_stats_domain',
                      metavar='<csc-stats-domain>',
                      default='users',
                      help='Domain name for user query in CSC stats. '
                           'Defaults to \'users\'.')
  parser.add_argument('-j', '--milliseconds',
                      action='store_true',
                      default=False,
                      help='not implemented')

  args = parser.parse_args()
  try:
    check = CheckKeystone(vars(args))
    check.check_service_endpoints()
    csc_stats = check.csc_stats(args.csc_stats_domain)
    exit_output(NAGIOS_STATE_OK, csc_stats)
  except CheckException as e:
    exit_output(e.status, e.message)
  except Exception as e:
    exit_output(NAGIOS_STATE_UNKNOWN, e.message)

if __name__ == '__main__':
  main()
