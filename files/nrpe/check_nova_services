#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Obtain informations by nova-manage 
# Updated 20130828 by JG. Had to 2>&1 of output of "nova-manage service list" in $p1 when debug was on.

from subprocess import Popen, PIPE
import sys
import argparse
#import os
import time
# Exit statuses recognized by Nagios
nagios = 0
output = ""

parser = argparse.ArgumentParser(description='Get list of nova service for nagios',epilog="This plugin uses the 'nova-manage' command.")
parser.add_argument('command',nargs='+',help='services to question')
#parser.add_argument("-w","--warning",required=True,action="store",help='Warning threshold range(s)')
#parser.add_argument("-c","--critical",required=True,action="store",help='Critical threshold range(s)')
parser.add_argument('--version', action='version', version='%(prog)s 0.1')
args = parser.parse_args()
value = 0
node_counter = 0

#logfile = open("/tmp/logfilename", "w")
#p = Popen(('/usr/bin/nova-manage', 'service', 'list'),stdout=logfile,stderr=logfile)
#ret_code = p.wait()
#logfile.flush()
#logfile.close()
#sys.exit(nagios)

# deprecated: for row in os.popen("/usr/bin/nova-manage service list 2>&- | /bin/grep XXX").readlines():
#p1 = Popen(["/usr/bin/nova-manage", "service", "list"],stdout=PIPE,stderr=PIPE)
p1 = Popen(["/usr/bin/nova-manage", "service", "list", "2>&1"],stdout=PIPE,stderr=PIPE)
p2 = Popen(["grep", "XXX"], stdin=p1.stdout,stdout=PIPE,stderr=PIPE)
p1.stdout.close()
text,stderr = p2.communicate()
# time.sleep(5)
for row in text.split('\n'):
    if row.__len__() < 2: continue
    # print "Row: %s\n" % row
    row_words = row.split()
    for service in args.command :
       if row_words[0] == service :
          # print "Match!"
          if nagios == 2: output += ", "
          if row_words[3] == "enabled":
             #output += "Service: %s on %s with status %s" % (row_words[0],row_words[1],row_words[3])
	     # because we always only test one service (row_words[0]) and this is row_words[3] is always enabled (see last if), reducing output:
             output += "%s" % (row_words[1])
	     node_counter = node_counter + 1
             nagios = 2
    # sorting output output
    listofnodes = ""
    for node in sorted(output.split(), key=str.lower):
       listofnodes += node

# if value <= int(args.warning) :
#       if nagios < 1 : nagios = 1
#    if value <= int(args.critical) :
#       if nagios < 2 : nagios = 2
#    if value > int(args.warning) : 
#       if nagios == -1 : nagios = 0

if nagios == 0 :
        status = "OK"
elif nagios == 1 :
        status = "WARNING"
elif nagios == 2 :
        status = "CRITICAL"
elif nagios == -1 :
        status = "UNKNOWN"
else :
        status = "ERROR"
if output == "" : 
   #print "Nova services %s is %s " % (service,status)
   print "Nova services is %s " % (status)
else: 
   print "Nova services %s is %s for %s nodes: %s" % (service,status,node_counter,listofnodes)

sys.exit(nagios)

